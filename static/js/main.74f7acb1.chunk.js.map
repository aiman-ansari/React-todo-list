{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","newValue","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","onClick","TodoList","setTodos","newTodos","completetodo","updatedTodos","removeArr","filter","todoId","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAoDeA,MAnDf,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,SAAW,IADjD,mBACdC,EADc,KACPC,EADO,KAEfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAa,SAAAC,GACfP,EAASO,EAAEC,OAAOC,QAW1B,OACI,0BAAMC,UAAU,YAAYC,SATP,SAAAJ,GACjBA,EAAEK,iBACFjB,EAAMgB,SAAS,CACfE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAOlB,IAEPC,EAAS,MAIPL,EAAME,KAEP,oCACA,2BAAOqB,KAAK,OACRC,YAAY,cACZV,MAAOV,EACPW,UAAU,kBACVU,KAAK,OACLC,SAAUf,EACVgB,IAAKrB,IAEL,4BAAQS,UAAU,oBAAlB,WAIC,oCACA,2BAAOQ,KAAK,OACbC,YAAY,aACZV,MAAOV,EACPW,UAAU,aACVU,KAAK,OACLC,SAAUf,EACVgB,IAAKrB,IACL,4BAAQS,UAAU,eAAlB,U,qBCJEa,MArCf,YAA6D,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,aAAaC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EACjC/B,mBAAS,CAC5BiB,GAAI,KACJJ,MAAO,KAH6C,mBACjDZ,EADiD,KAC3C+B,EAD2C,KAcxD,OAAG/B,EAAKgB,GACE,kBAAC,EAAD,CAAUhB,KAAMA,EAAMc,SATX,SAAAF,GACjBkB,EAAW9B,EAAKgB,GAAIJ,GACpBmB,EAAQ,CACJf,GAAI,KACJJ,MAAM,QAOLe,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,yBACArB,UAAWoB,EAAKE,WAAa,oBAAsB,WACnDC,IAAKF,GAED,yBAAKE,IAAKH,EAAKjB,GAAIqB,QAAS,kBAAIT,EAAaK,EAAKjB,MAC7CiB,EAAKb,MAEV,yBAAKP,UAAU,SACf,kBAAC,IAAD,CAEAwB,QAAS,kBAAIR,EAAWI,EAAKjB,KAC7BH,UAAU,iBACV,kBAAC,IAAD,CAASwB,QAAS,kBAAIN,EAAQ,CAACf,GAAIiB,EAAKjB,GAAIJ,MAAMqB,EAAKb,QACvDP,UAAU,qBCQTyB,MAxCf,WAAoB,IAAD,EACUvC,mBAAS,IADnB,mBACT4B,EADS,KACFY,EADE,KA+Bf,OACI,6BACA,yDACA,kBAAC,EAAD,CAAUzB,SA/BE,SAAAmB,GACZ,IAAMO,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BY,EAASC,MA8BT,kBAAC,EAAD,CAAMb,MAASA,EAAOc,aAdL,SAAAzB,GACjB,IAAI0B,EAAcf,EAAMK,KAAI,SAAAC,GAIxB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXM,EAASG,IAOyCb,WAnBpC,SAAAb,GACd,IAAM2B,EAAW,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAEA,EAAKjB,KAAMA,KACpDuB,EAASI,IAiBiEb,WA3B3D,SAACe,EAAQ5C,GACxBsC,GAAS,SAAAO,GAAI,OAAEA,EAAKd,KAAI,SAAAe,GAAI,OAAIA,EAAK/B,KAAO6B,EAAS5C,EAAW8C,aCCzDC,MAVf,WACI,OACI,yBAAKnC,UAAU,SAEvB,kBAAC,EAAD,QCJAoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.74f7acb1.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react';\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.newValue : '');\r\n    const inputRef = useRef(null);\r\n    \r\n    useEffect(()=>{\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange=e=>{\r\n        setInput(e.target.value);\r\n    };\r\n    \r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text : input\r\n        })\r\n        setInput('');\r\n    };\r\nreturn(\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n         {props.edit ? \r\n         (\r\n         <>\r\n         <input type='text' \r\n             placeholder='Update todo'\r\n             value={input}\r\n             className='todo-input edit'\r\n             name='text'\r\n             onChange={handleChange}\r\n             ref={inputRef}/>\r\n             \r\n             <button className=\"todo-button edit\">Update</button>\r\n             </>)\r\n              :\r\n              (\r\n              <>\r\n              <input type='text' \r\n             placeholder='Enter Todo'\r\n             value={input}\r\n             className='todo-input'\r\n             name='text'\r\n             onChange={handleChange}\r\n             ref={inputRef}/>\r\n             <button className=\"todo-button\">Add</button>\r\n             </> ) \r\n            }\r\n    </form>\r\n); \r\n}\r\nexport default TodoForm;","import React,{useState} from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport TodoList from './TodoList';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { TiEdit } from 'react-icons/ti';\r\nfunction Todo({todos, completeTodo,removeTodo, updateTodo }){\r\n    const [edit, setEdit]= useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value:''\r\n        })\r\n    }\r\n    \r\n    if(edit.id){\r\n        return<TodoForm edit={edit} onSubmit={submitUpdate}/>\r\n                }\r\n      return todos.map((todo, index)=>(\r\n          <div \r\n          className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n          key={index}\r\n          >\r\n              <div key={todo.id} onClick={()=>completeTodo(todo.id)}>\r\n                  {todo.text}\r\n              </div>\r\n              <div className=\"icons\">\r\n              <AiOutlineCloseCircle\r\n             // onClick={()=>removeTodo(todo.id)}\r\n              onClick={()=>removeTodo(todo.id)}\r\n              className=\"delete-icons\"/>\r\n              <TiEdit  onClick={()=>setEdit({id: todo.id, value:todo.text})}\r\n              className=\"edit-icons\"/>\r\n\r\n              </div>\r\n          </div>\r\n      ))\r\n}\r\nexport default Todo;","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(){\r\n    const[todos, setTodos] = useState([]);\r\n    \r\n    const addTodo = todo =>{\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n        setTodos(prev=>prev.map(item=> (item.id === todoId ? newValue : item))\r\n        );\r\n\r\n    };\r\n\r\n\r\n\r\n    const removeTodo =id =>{\r\n        const removeArr =[...todos].filter(todo=>todo.id!== id)\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id=>{\r\n        let updatedTodos =todos.map(todo =>{\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n        <h1>What's the plan for Today</h1>\r\n        <TodoForm onSubmit={addTodo}  />  \r\n        <Todo todos = {todos} completetodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default TodoList;","import React from 'react';\r\nimport './App.css';\r\nimport TodoForm from './components/TodoForm';\r\nimport TodoList from './components/TodoList';\r\nfunction App(){\r\n    return(\r\n        <div className=\"to-do\">\r\n           \r\n<TodoList/>\r\n\r\n      \r\n        </div>\r\n    )\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//   serviceWorker.unregister();\n"],"sourceRoot":""}